{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Request,\n  Response,\n  ResponseOptions,\n  CreateBody,\n  HeaderTuple\n} from \"servie/dist/browser\";\nimport { useRawBody } from \"servie/dist/common\";\n\n/**\n * Extend response with URL.\n */\nexport interface XhrResponseOptions extends ResponseOptions {\n  url: string;\n}\n\n/**\n * XHR responses can indicate a response URL.\n */\nexport class XhrResponse extends Response implements XhrResponseOptions {\n  url: string;\n\n  constructor(body: CreateBody, options: XhrResponseOptions) {\n    super(body, options);\n    this.url = options.url;\n  }\n}\n\n/**\n * Valid XHR configuration.\n */\nexport interface TransportOptions {\n  type?: XMLHttpRequestResponseType;\n  withCredentials?: boolean;\n  overrideMimeType?: string;\n}\n\nexport class BlockedRequestError extends Error {\n  code = \"EBLOCKED\";\n\n  constructor(public request: Request, message: string) {\n    super(message);\n  }\n}\n\nexport class InvalidRequestError extends Error {\n  code = \"EINVALID\";\n\n  constructor(public request: Request, message: string) {\n    super(message);\n  }\n}\n\nexport class ConnectionError extends Error {\n  code = \"EUNAVAILABLE\";\n\n  constructor(public request: Request, message: string) {\n    super(message);\n  }\n}\n\nexport class CSPError extends Error {\n  code = \"ECSP\";\n\n  constructor(public request: Request, message: string) {\n    super(message);\n  }\n}\n\nexport class TypeError extends Error {\n  code = \"ETYPE\";\n\n  constructor(public request: Request, message: string) {\n    super(message);\n  }\n}\n\nexport class AbortError extends Error {\n  code = \"EABORT\";\n\n  constructor(public request: Request, message: string) {\n    super(message);\n  }\n}\n\n/**\n * Forward request over `XMLHttpRequest`.\n */\nexport function transport(options: TransportOptions = {}) {\n  return function(req: Request): Promise<XhrResponse> {\n    return new Promise<XhrResponse>(function(resolve, reject) {\n      const type = options.type || \"arraybuffer\";\n      const method = req.method.toUpperCase();\n\n      if (req.signal.aborted) {\n        return reject(new AbortError(req, \"Request has been aborted\"));\n      }\n\n      // Loading HTTP resources from HTTPS is restricted and uncatchable.\n      if (\n        window.location.protocol === \"https:\" &&\n        req.url.startsWith(\"http:\")\n      ) {\n        return reject(\n          new BlockedRequestError(\n            req,\n            `The connection to \"${req.url}\" is blocked`\n          )\n        );\n      }\n\n      // Catch URLs that will cause the request to hang indefinitely in CORS\n      // disabled environments, such as Atom Editor.\n      if (/^https?\\:\\/*(?:[~#\\\\\\?;\\:]|$)/.test(req.url)) {\n        return reject(\n          new InvalidRequestError(req, `Refusing to connect to \"${req.url}\"`)\n        );\n      }\n\n      const xhr = new XMLHttpRequest();\n      let hasUploadProgress = false;\n\n      function ondone() {\n        const res = new XhrResponse(\n          type === \"text\" ? xhr.responseText : xhr.response,\n          {\n            status: xhr.status === 1223 ? 204 : xhr.status,\n            statusText: xhr.statusText,\n            headers: parseXhrHeaders(xhr.getAllResponseHeaders()),\n            omitDefaultHeaders: true,\n            url: xhr.responseURL\n          }\n        );\n\n        req.signal.emit(\"responseStarted\");\n        req.signal.emit(\"responseEnded\");\n\n        return resolve(res);\n      }\n\n      function onerror() {\n        return reject(\n          new ConnectionError(req, `Unable to connect to \"${req.url}\"`)\n        );\n      }\n\n      xhr.onload = ondone;\n      xhr.onabort = ondone;\n      xhr.onerror = onerror;\n\n      xhr.onprogress = (e: ProgressEvent) => {\n        req.signal.emit(\"requestBytes\", e.loaded);\n      };\n\n      // No upload will occur with these requests.\n      if (method !== \"GET\" && method !== \"HEAD\" && xhr.upload) {\n        hasUploadProgress = true;\n\n        xhr.upload.onprogress = (e: ProgressEvent) => {\n          req.signal.emit(\"responseBytes\", e.loaded);\n        };\n\n        xhr.upload.onloadend = () => {\n          req.signal.emit(\"requestEnded\");\n        };\n      }\n\n      // XHR can fail to open when site CSP is set.\n      try {\n        xhr.open(method, req.url);\n      } catch (err) {\n        return reject(new CSPError(req, `Refused to connect to \"${req.url}\"`));\n      }\n\n      // Send cookies with CORS.\n      if (options.withCredentials) xhr.withCredentials = true;\n\n      // Enable overriding the response MIME handling.\n      if (options.overrideMimeType) {\n        xhr.overrideMimeType(options.overrideMimeType);\n      }\n\n      // Use the passed in type for the response.\n      if (type !== \"text\") {\n        try {\n          xhr.responseType = type;\n        } finally {\n          if (xhr.responseType !== type) {\n            return reject(new TypeError(req, `Unsupported type: ${type}`));\n          }\n        }\n      }\n\n      for (const [key, value] of req.headers.entries()) {\n        if (Array.isArray(value)) {\n          for (const v of value) xhr.setRequestHeader(key, v);\n        } else {\n          xhr.setRequestHeader(key, value);\n        }\n      }\n\n      req.signal.emit(\"requestStarted\");\n      if (!hasUploadProgress) req.signal.emit(\"requestEnded\");\n\n      req.signal.on(\"abort\", () => xhr.abort());\n\n      // Send raw body as-is since it's already best supported.\n      xhr.send(useRawBody(req));\n    });\n  };\n}\n\n/**\n * Parse a headers string into an array of raw headers.\n */\nfunction parseXhrHeaders(headers: string): HeaderTuple[] {\n  const rawHeaders: HeaderTuple[] = [];\n  const lines = headers.split(/\\r?\\n/);\n\n  for (const line of lines) {\n    if (line) {\n      const indexOf = line.indexOf(\":\");\n      const name = line.substr(0, indexOf).trim();\n      const value = line.substr(indexOf + 1).trim();\n\n      rawHeaders.push([name, value]);\n    }\n  }\n\n  return rawHeaders;\n}\n"]}