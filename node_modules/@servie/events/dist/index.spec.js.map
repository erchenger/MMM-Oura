{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../src/index.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { Emitter, EachEventListener, once } from \"./index\";\n\ndescribe(\"tiny events\", () => {\n  interface Events {\n    test: [boolean];\n    other: [string];\n  }\n\n  describe(\"events\", () => {\n    it(\"should emit events\", () => {\n      const events = new Emitter<Events>();\n      const spy = jest.fn();\n\n      events.on(\"test\", spy);\n      events.emit(\"test\", true);\n\n      events.off(\"test\", spy);\n      events.emit(\"test\", false);\n\n      expect(spy).toHaveBeenCalledTimes(1);\n      expect(spy).toHaveBeenLastCalledWith(true);\n    });\n\n    it(\"should noop when removing unknown listing\", () => {\n      const events = new Emitter<Events>();\n      const fn1 = jest.fn();\n      const fn2 = jest.fn();\n\n      expect(events.$.test).toBeUndefined();\n\n      events.off(\"test\", fn1);\n      expect(events.$.test).toBeUndefined();\n\n      events.on(\"test\", fn2);\n      events.off(\"test\", fn1);\n      expect(events.$.test).toEqual([fn2]);\n    });\n\n    it(\"should emit `each` event\", () => {\n      const events = new Emitter<Events>();\n      const spy = jest.fn();\n\n      events.emit(\"test\", false);\n      expect(spy).not.toHaveBeenCalled();\n\n      events.each(spy);\n      events.emit(\"test\", true);\n      expect(spy).toHaveBeenCalledTimes(1);\n\n      events.none(spy);\n      events.emit(\"test\", false);\n      expect(spy).toHaveBeenCalledTimes(1);\n    });\n\n    it(\"should forward `each` events easily\", () => {\n      const events1 = new Emitter<Events>();\n      const events2 = new Emitter<Pick<Events, \"test\">>();\n      const spy = jest.fn();\n\n      events2.each(({ type, args }) => {\n        events1.emit(type, ...args);\n      });\n\n      events1.on(\"test\", spy);\n      events2.emit(\"test\", true);\n\n      expect(spy).toHaveBeenLastCalledWith(true);\n    });\n\n    it(\"should filter `each` events easily\", () => {\n      const events1 = new Emitter<Events>();\n      const events2 = new Emitter<Pick<Events, \"test\">>();\n      const spy = jest.fn();\n\n      events1.each(e => {\n        if (e.type === \"test\") {\n          events2.emit(e.type, ...e.args);\n        }\n      });\n\n      events2.on(\"test\", spy);\n      events1.emit(\"test\", true);\n      events1.emit(\"other\", \"\");\n\n      expect(spy).toHaveBeenLastCalledWith(true);\n    });\n  });\n\n  describe(\"once\", () => {\n    it(\"should support a once listener\", () => {\n      const events = new Emitter<Events>();\n      const spy = jest.fn();\n\n      once(events, \"test\", spy);\n\n      events.emit(\"test\", true);\n      events.emit(\"test\", false);\n\n      expect(spy).toHaveBeenCalledTimes(1);\n    });\n\n    it(\"should not break emitter by removing element within listener\", () => {\n      const events = new Emitter<Events>();\n      const onSpy = jest.fn();\n      const onceSpy = jest.fn();\n\n      once(events, \"test\", onceSpy);\n      events.on(\"test\", onSpy);\n\n      events.emit(\"test\", true);\n\n      expect(onSpy).toHaveBeenCalledTimes(1);\n      expect(onceSpy).toHaveBeenCalledTimes(1);\n    });\n  });\n});\n"]}