{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;AAwBA;;GAEG;AACH,MAAa,OAAO;IAApB;QACE,MAAC,GAAgC,EAAE,CAAC;QACpC,MAAC,GAAoD,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAwB3E,CAAC;IAtBC,EAAE,CAAoB,IAAO,EAAE,QAA6B;QAC1D,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAE,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACtD,CAAC;IAED,GAAG,CAAoB,IAAO,EAAE,QAA6B;QAC3D,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QAC3B,IAAI,KAAK;YAAE,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5D,CAAC;IAED,IAAI,CAAC,QAA8B;QACjC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACxB,CAAC;IAED,IAAI,CAAC,QAA8B;QACjC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC;IAED,IAAI,CAAoB,IAAO,EAAE,GAAG,IAAqB;QACvD,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QAC3B,IAAI,KAAK;YAAE,KAAK,CAAC,KAAK,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;QACpD,IAAI,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC;CACF;AA1BD,0BA0BC;AAED;;GAEG;AACH,SAAgB,IAAI,CAClB,MAAkB,EAClB,IAAO,EACP,QAA6B;IAE7B,SAAS,IAAI,CAAC,GAAG,IAAqB;QACpC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACvB,OAAO,QAAQ,CAAC,GAAG,IAAI,CAAC,CAAC;IAC3B,CAAC;IACD,MAAM,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACtB,OAAO,IAAI,CAAC;AACd,CAAC;AAXD,oBAWC","sourcesContent":["/**\n * Valid event listener args.\n */\nexport type ValidArgs<T> = T extends any[] ? T : never;\n\n/**\n * Event listener type.\n */\nexport type EventListener<T, K extends keyof T> = (\n  ...args: ValidArgs<T[K]>\n) => void;\n\n/**\n * Valid `each` listener args.\n */\nexport type EachValidArgs<T> = {\n  [K in keyof T]: { type: K, args: ValidArgs<T[K]> }\n}[keyof T];\n\n/**\n * Wildcard event listener type.\n */\nexport type EachEventListener<T> = (arg: EachValidArgs<T>) => void;\n\n/**\n * Type-safe event emitter.\n */\nexport class Emitter<T> {\n  _: Array<EachEventListener<T>> = [];\n  $: { [K in keyof T]?: Array<EventListener<T, K>> } = Object.create(null);\n\n  on<K extends keyof T>(type: K, callback: EventListener<T, K>) {\n    (this.$[type] = this.$[type]! || []).push(callback);\n  }\n\n  off<K extends keyof T>(type: K, callback: EventListener<T, K>) {\n    const stack = this.$[type];\n    if (stack) stack.splice(stack.indexOf(callback) >>> 0, 1);\n  }\n\n  each(callback: EachEventListener<T>) {\n    this._.push(callback);\n  }\n\n  none(callback: EachEventListener<T>) {\n    this._.splice(this._.indexOf(callback) >>> 0, 1);\n  }\n\n  emit<K extends keyof T>(type: K, ...args: ValidArgs<T[K]>) {\n    const stack = this.$[type];\n    if (stack) stack.slice().forEach(fn => fn(...args));\n    this._.slice().forEach(fn => fn({ type, args }));\n  }\n}\n\n/**\n * Helper to listen to an event once only.\n */\nexport function once<T, K extends keyof T>(\n  events: Emitter<T>,\n  type: K,\n  callback: EventListener<T, K>\n) {\n  function self(...args: ValidArgs<T[K]>) {\n    events.off(type, self);\n    return callback(...args);\n  }\n  events.on(type, self);\n  return self;\n}\n"]}