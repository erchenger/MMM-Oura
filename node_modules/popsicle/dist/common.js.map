{"version":3,"file":"common.js","sourceRoot":"","sources":["../src/common.ts"],"names":[],"mappings":";;;AAGA;;GAEG;AACH,SAAgB,OAAO,CAIrB,UAA0B,EAAE,OAA8B;IAC1D,SAAS,IAAI;QACX,MAAM,IAAI,SAAS,CAAC,sDAAsD,CAAC,CAAC;IAC9E,CAAC;IAED,OAAO,SAAS,KAAK,CAAC,GAAG,IAAO;QAC9B,MAAM,GAAG,GACP,IAAI,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,YAAY,OAAO;YAC7C,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACT,CAAC,CAAC,IAAI,OAAO,CAAC,GAAG,IAAI,CAAC,CAAC;QAE3B,OAAO,UAAU,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IAC/B,CAAC,CAAC;AACJ,CAAC;AAjBD,0BAiBC","sourcesContent":["import { Composed } from \"throwback\";\nimport { CommonRequest, CommonResponse } from \"servie/dist/common\";\n\n/**\n * Create a `fetch` like interface from middleware stack.\n */\nexport function toFetch<\n  T extends CommonRequest,\n  U extends CommonResponse,\n  A extends any[]\n>(middleware: Composed<T, U>, Request: new (...args: A) => T) {\n  function done(): never {\n    throw new TypeError(\"Invalid middleware stack, missing transport function\");\n  }\n\n  return function fetch(...args: A) {\n    const req =\n      args.length === 1 && args[0] instanceof Request\n        ? args[0]\n        : new Request(...args);\n\n    return middleware(req, done);\n  };\n}\n"]}