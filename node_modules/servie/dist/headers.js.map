{"version":3,"file":"headers.js","sourceRoot":"","sources":["../src/headers.ts"],"names":[],"mappings":"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","sourcesContent":["export type HeaderValue = string | string[];\nexport type HeadersObject = Record<string, HeaderValue>;\nexport type HeaderTuple = [string, HeaderValue];\n\nexport type HeaderValueInput = number | string | Array<number | string>;\nexport type HeadersObjectInput = Record<string, HeaderValueInput | undefined>;\nexport type HeaderTupleInput = [string, HeaderValueInput];\nexport type HeadersInit = Iterable<HeaderTupleInput> | HeadersObjectInput | Headers;\n\n/**\n * Map of HTTP headers.\n */\nexport class Headers {\n  object: HeadersObject = Object.create(null);\n\n  constructor(init?: HeadersInit) {\n    if (init) this.extend(init);\n  }\n\n  set(headerName: string, value: HeaderValueInput): void {\n    this.object[headerName.toLowerCase()] =\n      Array.isArray(value) ? value.map(String) : String(value);\n  }\n\n  append(headerName: string, value: HeaderValueInput): void {\n    const key = headerName.toLowerCase();\n    const prevValue = this.object[key];\n    // tslint:disable-next-line\n    if (prevValue === undefined) {\n      if (Array.isArray(value)) {\n        this.object[key] = value.map(String);\n      } else {\n        this.object[key] = String(value);\n      }\n    } else if (Array.isArray(prevValue)) {\n      if (Array.isArray(value)) {\n        for (const v of value) prevValue.push(String(v));\n      } else {\n        prevValue.push(String(value));\n      }\n    } else {\n      this.object[key] = Array.isArray(value)\n        ? [prevValue, ...value.map(String)]\n        : [prevValue, String(value)];\n    }\n  }\n\n  get(headerName: string): string | null {\n    const value = this.object[headerName.toLowerCase()];\n    if (value === undefined) return null; // tslint:disable-line\n    return Array.isArray(value) ? value[0] : value;\n  }\n\n  getAll(headerName: string): string[] {\n    const value = this.object[headerName.toLowerCase()];\n    if (value === undefined) return []; // tslint:disable-line\n    return Array.isArray(value) ? [...value] : [value];\n  }\n\n  has(headerName: string): boolean {\n    return headerName.toLowerCase() in this.object;\n  }\n\n  delete(headerName: string): void {\n    delete this.object[headerName.toLowerCase()];\n  }\n\n  *entries(): IterableIterator<HeaderTuple> {\n    yield* Object.entries(this.object);\n  }\n\n  *keys(): IterableIterator<string> {\n    yield* Object.keys(this.object);\n  }\n\n  *values(): IterableIterator<HeaderValue> {\n    yield* Object.values(this.object);\n  }\n\n  clear(): void {\n    this.object = Object.create(null);\n  }\n\n  asObject(): HeadersObject {\n    return Object.assign(Object.create(null), this.object);\n  }\n\n  extend(obj: HeadersInit): void {\n    if (Symbol.iterator in obj) {\n      for (const [key, value] of obj as Iterable<HeaderTuple>) {\n        this.append(key, value);\n      }\n    } else if (obj instanceof Headers) {\n      for (const [key, value] of obj.entries()) this.append(key, value);\n    } else {\n      for (const key of Object.keys(obj)) {\n        const value = (obj as HeadersObjectInput)[key];\n        if (value !== undefined) this.append(key, value);\n      }\n    }\n  }\n\n  clone(): Headers {\n    return new Headers(this.object);\n  }\n}\n"]}