{"version":3,"file":"node.spec.js","sourceRoot":"","sources":["../src/node.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response, Headers } from \"./node\";\n\ndescribe(\"node\", () => {\n  describe(\"headers\", () => {\n    it(\"should init from an array\", () => {\n      const headers = new Headers([[\"Number\", 1] as [string, number]]);\n\n      expect(headers.get(\"Number\")).toEqual(\"1\");\n      expect(headers.get(\"Other\")).toEqual(null);\n    });\n\n    it(\"should init from an object\", () => {\n      const headers = new Headers({\n        Number: 1,\n        String: \"Two\",\n        Strings: [\"One\", \"Two\", \"Three\"],\n        Numbers: [1, 2, 3]\n      });\n\n      expect(headers.get(\"Number\")).toEqual(\"1\");\n      expect(headers.get(\"String\")).toEqual(\"Two\");\n      expect(headers.get(\"Numbers\")).toEqual(\"1\");\n      expect(headers.get(\"Strings\")).toEqual(\"One\");\n      expect(headers.get(\"Other\")).toEqual(null);\n    });\n  });\n\n  describe(\"request\", () => {\n    it(\"should contain base properties\", () => {\n      const req = new Request(\"/test\");\n\n      expect(req.url).toBe(\"/test\");\n      expect(req.headers).toBeInstanceOf(Headers);\n      expect(req.trailer).toBeInstanceOf(Promise); // tslint:disable-line\n    });\n\n    describe(\"headers\", () => {\n      it(\"should accept instance of headers\", () => {\n        const headers = new Headers([[\"Test\", \"1\"] as [string, string]]);\n        const req = new Request(\"/\", { headers });\n\n        expect(req.headers).not.toBe(headers);\n        expect(req.headers.get(\"Test\")).toEqual(\"1\");\n        expect(req.headers.get(\"Other\")).toEqual(null);\n      });\n\n      it(\"should accept a map of headers\", () => {\n        const req = new Request(\"/\", {\n          headers: { Test: \"1\" }\n        });\n\n        expect(req.headers.get(\"Test\")).toEqual(\"1\");\n        expect(req.headers.get(\"Other\")).toEqual(null);\n      });\n\n      it(\"should initialize default headers\", () => {\n        const req = new Request(\"\", {\n          body: \"test\"\n        });\n\n        expect(req.headers.get(\"Content-Type\")).toEqual(\"text/plain\");\n        expect(req.headers.get(\"Content-Length\")).toEqual(\"4\");\n      });\n\n      it(\"should skip default header initialization\", () => {\n        const req = new Request(\"/\", {\n          body: \"test\",\n          omitDefaultHeaders: true\n        });\n\n        expect(req.headers.get(\"Content-Length\")).toEqual(null);\n\n        const clonedReq = req.clone();\n\n        expect(clonedReq.headers.get(\"Content-Length\")).toEqual(null);\n\n        const initReq = new Request(req);\n\n        expect(initReq.headers.get(\"Content-Length\")).toEqual(null);\n      });\n\n      it(\"should clone new header instances\", () => {\n        const req = new Request(\"/\", {\n          headers: {\n            Test: \"true\"\n          }\n        });\n\n        expect(req.headers.get(\"test\")).toEqual(\"true\");\n\n        const clonedReq = req.clone();\n        clonedReq.headers.set(\"Test\", \"false\");\n\n        expect(req.headers.get(\"test\")).toEqual(\"true\");\n        expect(clonedReq.headers.get(\"test\")).toEqual(\"false\");\n\n        const initReq = new Request(req);\n        initReq.headers.set(\"Test\", \"false\");\n\n        expect(req.headers.get(\"test\")).toEqual(\"true\");\n        expect(initReq.headers.get(\"test\")).toEqual(\"false\");\n      });\n    });\n\n    describe(\"body\", () => {\n      it(\"should allow null bodies to be re-used\", async () => {\n        const req = new Request(\"/\", { body: null });\n\n        expect(await req.text()).toEqual(\"\");\n        expect(await req.text()).toEqual(\"\"); // Second read.\n      });\n\n      it(\"should allow undefined bodies to be re-used\", async () => {\n        const req = new Request(\"/\", { body: undefined });\n\n        expect(await req.text()).toEqual(\"\");\n        expect(await req.text()).toEqual(\"\"); // Second read.\n      });\n\n      it(\"should support `ArrayBuffer`\", async () => {\n        const req = new Request(\"/\", { body: new ArrayBuffer(0) });\n\n        expect(req.headers.get(\"Content-Type\")).toEqual(\n          \"application/octet-stream\"\n        );\n\n        expect(await req.text()).toEqual(\"\");\n      });\n\n      it(\"should support `Buffer`\", async () => {\n        const req = new Request(\"/\", { body: Buffer.from(\"test\") });\n\n        expect(req.headers.get(\"Content-Type\")).toEqual(\n          \"application/octet-stream\"\n        );\n\n        expect(await req.text()).toEqual(\"test\");\n      });\n\n      it(\"should support strings\", async () => {\n        const req = new Request(\"/\", { body: \"test\" });\n\n        expect(req.headers.get(\"Content-Type\")).toEqual(\"text/plain\");\n\n        expect(await req.text()).toEqual(\"test\");\n      });\n    });\n\n    it(\"should be able to clone\", () => {\n      const req = new Request(\"/\");\n      const reqClone = new Request(req);\n\n      expect(req).not.toBe(reqClone);\n      expect(req.url).toEqual(reqClone.url);\n      expect(req.method).toEqual(reqClone.method);\n      expect(req.headers).toEqual(reqClone.headers);\n      expect(req.$rawBody).toEqual(reqClone.$rawBody);\n\n      const fn = jest.fn();\n\n      reqClone.signal.on(\"abort\", fn);\n      req.signal.emit(\"abort\");\n\n      expect(fn).toHaveBeenCalled();\n    });\n  });\n\n  describe(\"response\", () => {\n    it(\"should create 200 responses by default\", () => {\n      const res = new Response(null, { statusText: \"Awesome job!\" });\n\n      expect(res.status).toBe(200);\n      expect(res.ok).toBe(true);\n      expect(res.statusText).toBe(\"Awesome job!\");\n    });\n\n    it(\"should create custom status code responses\", async () => {\n      const res = new Response(\"test\", { status: 404 });\n\n      expect(res.status).toBe(404);\n      expect(res.ok).toBe(false);\n      expect(res.statusText).toBe(\"\");\n      expect(await res.text()).toBe(\"test\");\n    });\n\n    it(\"should be able to clone\", () => {\n      const res = new Response(null, { status: 201 });\n      const resClone = new Response(null, res);\n\n      expect(res).not.toBe(resClone);\n\n      expect(res.status).toEqual(resClone.status);\n      expect(res.statusText).toEqual(resClone.statusText);\n      expect(res.headers).toEqual(resClone.headers);\n      expect(res.$rawBody).toEqual(resClone.$rawBody);\n    });\n  });\n});\n"]}