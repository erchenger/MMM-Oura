{"version":3,"file":"common.js","sourceRoot":"","sources":["../src/common.ts"],"names":[],"mappings":";;AAGA;;GAEG;AACU,QAAA,SAAS,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;AAE5C;;GAEG;AACU,QAAA,cAAc,GAAG,MAAM,CAAC,eAAe,CAAC,CAAC;AAEtD;;GAEG;AACH,SAAgB,UAAU,CAAI,IAAmB;IAC/C,MAAM,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;IACjC,IAAI,OAAO,KAAK,IAAI;QAAE,OAAO,IAAI,CAAC,CAAC,YAAY;IAC/C,IAAI,CAAC,QAAQ,GAAG,iBAAS,CAAC;IAC1B,OAAO,OAAO,CAAC;AACjB,CAAC;AALD,gCAKC;AAED;;GAEG;AACH,SAAgB,UAAU,CAAI,IAAmB;IAC/C,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;IAC1B,IAAI,QAAQ,KAAK,iBAAS;QAAE,MAAM,IAAI,SAAS,CAAC,mBAAmB,CAAC,CAAC;IACrE,IAAI,QAAQ,KAAK,sBAAc;QAAE,MAAM,IAAI,SAAS,CAAC,mBAAmB,CAAC,CAAC;IAC1E,OAAO,QAAQ,CAAC;AAClB,CAAC;AALD,gCAKC","sourcesContent":["import { Headers, HeadersInit } from \"./headers\";\nimport { Signal } from \"./signal\";\n\n/**\n * Marker to indicate the body has been used.\n */\nexport const kBodyUsed = Symbol(\"bodyUsed\");\n\n/**\n * Marker to indicate the body has been destroyed and can not be used.\n */\nexport const kBodyDestroyed = Symbol(\"bodyDestroyed\");\n\n/**\n * Read and \"use\" the raw body from a `Body` instance.\n */\nexport function useRawBody<T>(body: CommonBody<T>) {\n  const rawBody = getRawBody(body);\n  if (rawBody === null) return null; // \"Unused\".\n  body.$rawBody = kBodyUsed;\n  return rawBody;\n}\n\n/**\n * Read the raw body from a `Body` instance.\n */\nexport function getRawBody<T>(body: CommonBody<T>) {\n  const { $rawBody } = body;\n  if ($rawBody === kBodyUsed) throw new TypeError(\"Body already used\");\n  if ($rawBody === kBodyDestroyed) throw new TypeError(\"Body is destroyed\");\n  return $rawBody;\n}\n\n/**\n * Support body input types.\n */\nexport type EmptyBody = null | undefined;\n\n/**\n * Body constructor shape.\n */\nexport type CommonBodyConstructor<T, U extends T> = {\n  new (body: T | EmptyBody, headers: Headers): CommonBody<U>;\n};\n\n/**\n * Abstract body shared between node.js and browsers.\n */\nexport interface CommonBody<T = unknown> {\n  $rawBody: T | null | typeof kBodyUsed | typeof kBodyDestroyed;\n  readonly bodyUsed: boolean;\n  json(): Promise<any>;\n  text(): Promise<string>;\n  arrayBuffer(): Promise<ArrayBuffer>;\n  clone(): CommonBody<T>;\n  destroy(): Promise<void>;\n}\n\n/**\n * Request configuration.\n */\nexport interface CommonRequestOptions<T> {\n  method?: string;\n  body?: T;\n  signal?: Signal;\n  headers?: HeadersInit;\n  omitDefaultHeaders?: boolean;\n  trailer?: HeadersInit | Promise<HeadersInit>;\n}\n\n/**\n * Request implementation standard.\n */\nexport interface CommonRequest<T = unknown> extends CommonBody<T> {\n  url: string;\n  method: string;\n  headers: Headers;\n  trailer: Promise<Headers>;\n  readonly signal: Signal;\n  clone(): CommonRequest<T>;\n}\n\n/**\n * Response configuration.\n */\nexport interface CommonResponseOptions {\n  status?: number;\n  statusText?: string;\n  headers?: HeadersInit;\n  omitDefaultHeaders?: boolean;\n  trailer?: HeadersInit | Promise<HeadersInit>;\n}\n\n/**\n * Response implementation standard.\n */\nexport interface CommonResponse<T = unknown> extends CommonBody<T> {\n  status: number;\n  statusText: string;\n  headers: Headers;\n  trailer: Promise<Headers>;\n  clone(): CommonResponse<T>;\n}\n"]}