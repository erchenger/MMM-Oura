{"version":3,"file":"signal.js","sourceRoot":"","sources":["../src/signal.ts"],"names":[],"mappings":";;AAAA,2CAA+C;AAe/C;;GAEG;AACH,MAAa,MAAO,SAAQ,gBAAqB;IAG/C;QACE,KAAK,EAAE,CAAC;QAHV,YAAO,GAAG,KAAK,CAAC;QAKd,+BAA+B;QAC/B,aAAI,CAAC,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC;IACnD,CAAC;CACF;AATD,wBASC;AAED;;GAEG;AACH,MAAa,eAAe;IAA5B;QACE,WAAM,GAAG,IAAI,MAAM,EAAE,CAAC;IAKxB,CAAC;IAHC,KAAK;QACH,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC5B,CAAC;CACF;AAND,0CAMC","sourcesContent":["import { Emitter, once } from \"@servie/events\";\n\n/**\n * Dictionary of supported signal events.\n */\nexport interface SignalEvents {\n  abort: [];\n  requestBytes: [number];\n  requestEnded: [];\n  requestStarted: [];\n  responseBytes: [number];\n  responseEnded: [];\n  responseStarted: [];\n}\n\n/**\n * Standard signal used to communicate during `request` processing.\n */\nexport class Signal extends Emitter<SignalEvents> {\n  aborted = false;\n\n  constructor() {\n    super();\n\n    // Listen for the abort signal.\n    once(this, \"abort\", () => (this.aborted = true));\n  }\n}\n\n/**\n * Fetch abort controller interface.\n */\nexport class AbortController {\n  signal = new Signal();\n\n  abort() {\n    this.signal.emit(\"abort\");\n  }\n}\n"]}