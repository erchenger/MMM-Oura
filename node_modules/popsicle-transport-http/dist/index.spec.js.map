{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../src/index.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { join } from \"path\";\nimport { readFileSync, createReadStream } from \"fs\";\nimport { Request, AbortController } from \"servie/dist/node\";\nimport { transport } from \"./index\";\n\nconst TEST_HTTP_URL = `http://localhost:${process.env.PORT}`;\nconst TEST_HTTPS_URL = `https://localhost:${process.env.HTTPS_PORT}`;\nconst TEST_HTTP2_URL = `https://localhost:${process.env.HTTP2_PORT}`;\n\nconst ca = readFileSync(join(__dirname, \"../scripts/support/ca-crt.pem\"));\n\ndescribe(\"popsicle transport http\", () => {\n  const done = () => {\n    throw new TypeError(\"Invalid request\");\n  };\n\n  it(\"should return 2xx statuses\", async () => {\n    const res = await transport()(\n      new Request(`${TEST_HTTP_URL}/status/204`),\n      done\n    );\n\n    expect(res.ok).toEqual(true);\n    expect(res.status).toEqual(204);\n    expect(res.statusText).toEqual(\"No Content\");\n  });\n\n  it(\"should return 4xx statuses\", async () => {\n    const res = await transport()(\n      new Request(`${TEST_HTTP_URL}/status/404`),\n      done\n    );\n\n    expect(res.ok).toEqual(false);\n    expect(res.status).toEqual(404);\n    expect(res.statusText).toEqual(\"Not Found\");\n  });\n\n  it(\"should return 5xx statuses\", async () => {\n    const res = await transport()(\n      new Request(`${TEST_HTTP_URL}/status/500`),\n      done\n    );\n\n    expect(res.ok).toEqual(false);\n    expect(res.status).toEqual(500);\n    expect(res.statusText).toEqual(\"Internal Server Error\");\n  });\n\n  it(\"should send path without query\", async () => {\n    const req = new Request(`${TEST_HTTP_URL}/url`);\n    const res = await transport()(req, done);\n\n    expect(res.status).toEqual(200);\n    expect(await res.text()).toEqual(\"/url\");\n  });\n\n  it(\"should send query params\", async () => {\n    const req = new Request(`${TEST_HTTP_URL}/url?test=true`);\n    const res = await transport()(req, done);\n\n    expect(res.status).toEqual(200);\n    expect(await res.text()).toEqual(\"/url?test=true\");\n  });\n\n  it(\"should send post data\", async () => {\n    const req = new Request(`${TEST_HTTP_URL}/echo`, {\n      method: \"POST\",\n      body: \"example data\",\n      headers: {\n        \"content-type\": \"application/octet-stream\",\n      },\n    });\n\n    const res = await transport()(req, done);\n\n    expect(res.status).toEqual(200);\n    expect(res.statusText).toEqual(\"OK\");\n    expect(res.headers.get(\"Content-Type\")).toEqual(\"application/octet-stream\");\n    expect(await res.text()).toEqual(\"example data\");\n  });\n\n  it(\"should send arraybuffer\", async () => {\n    const buffer = new ArrayBuffer(3);\n\n    const body = new Uint8Array(buffer);\n    body.set([1, 2, 3]);\n\n    const req = new Request(`${TEST_HTTP_URL}/echo`, {\n      method: \"POST\",\n      body: buffer,\n    });\n\n    const res = await transport()(req, done);\n\n    expect(res.status).toEqual(200);\n    expect(res.statusText).toEqual(\"OK\");\n    expect(res.headers.get(\"Content-Type\")).toEqual(\"application/octet-stream\");\n    expect(await res.arrayBuffer()).toEqual(buffer);\n  });\n\n  it(\"should send stream data\", async () => {\n    const req = new Request(`${TEST_HTTP_URL}/echo`, {\n      method: \"POST\",\n      body: createReadStream(join(__dirname, \"../README.md\")),\n    });\n\n    const res = await transport()(req, done);\n\n    expect(res.status).toEqual(200);\n    expect(res.statusText).toEqual(\"OK\");\n    expect(res.headers.get(\"Content-Type\")).toEqual(\"application/octet-stream\");\n    expect(await res.text()).toContain(\"Popsicle Transport HTTP\");\n  });\n\n  it(\"should abort before it starts\", async () => {\n    const controller = new AbortController();\n    const req = new Request(`${TEST_HTTP_URL}/echo`, {\n      signal: controller.signal,\n    });\n\n    controller.abort();\n\n    expect.assertions(1);\n\n    try {\n      await transport()(req, done);\n    } catch (err) {\n      expect(err.message).toEqual(\"Request has been aborted\");\n    }\n  });\n\n  it(\"should abort mid-request\", async () => {\n    const controller = new AbortController();\n    const req = new Request(`${TEST_HTTP_URL}/download`, controller);\n    const res = await transport()(req, done);\n\n    setTimeout(() => controller.abort(), 100);\n\n    expect(await res.text()).toEqual(\"hello \");\n  });\n\n  it(\"should have no side effects aborting twice\", async () => {\n    const controller = new AbortController();\n    const req = new Request(`${TEST_HTTP_URL}/download`, controller);\n\n    expect.assertions(1);\n\n    controller.abort();\n    controller.abort();\n\n    try {\n      await transport()(req, done);\n    } catch (err) {\n      expect(err.message).toEqual(\"Request has been aborted\");\n    }\n  });\n\n  it(\"should emit download progress\", async () => {\n    const req = new Request(`${TEST_HTTP_URL}/download`);\n    const spy = jest.fn();\n\n    const res = await transport()(req, done);\n\n    req.signal.on(\"responseBytes\", spy);\n\n    expect(await res.text()).toEqual(\"hello world!\");\n\n    // Check spy after body has loaded.\n    expect(spy).toBeCalledWith(12);\n  });\n\n  it(\"should reject https unauthorized\", async () => {\n    expect.assertions(1);\n\n    try {\n      await transport()(new Request(TEST_HTTPS_URL), done);\n    } catch (err) {\n      expect(err.code).toEqual(\"EUNAVAILABLE\");\n    }\n  });\n\n  it.skip(\"should support https ca option\", async () => {\n    const req = new Request(TEST_HTTPS_URL);\n    const res = await transport({ ca })(req, done);\n\n    expect(res.status).toEqual(200);\n    expect(await res.text()).toEqual(\"Success\");\n  });\n\n  it(\"should support disabling reject unauthorized\", async () => {\n    const req = new Request(TEST_HTTPS_URL);\n    const res = await transport({ rejectUnauthorized: false })(req, done);\n\n    expect(res.status).toEqual(200);\n    expect(await res.text()).toEqual(\"Success\");\n  });\n\n  it(\"should connect to http2 server\", async () => {\n    const req = new Request(TEST_HTTP2_URL);\n    const res = await transport({ rejectUnauthorized: false })(req, done);\n\n    expect(res.status).toEqual(200);\n    expect(res.httpVersion).toEqual(\"2.0\");\n    expect(await res.text()).toEqual(\"Success\");\n  });\n});\n"]}