{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { resolve } from \"url\";\nimport { CommonRequest, CommonResponse } from \"servie/dist/common\";\n\n/**\n * Add redirect support to servie events.\n */\ndeclare module \"servie/dist/signal\" {\n  export interface SignalEvents {\n    redirect: [string];\n  }\n}\n\n/**\n * Redirection types to handle.\n */\nenum REDIRECT_TYPE {\n  FOLLOW_WITH_GET,\n  FOLLOW_WITH_CONFIRMATION\n}\n\n/**\n * Possible redirection status codes.\n */\nconst REDIRECT_STATUS: { [status: number]: number | undefined } = {\n  \"301\": REDIRECT_TYPE.FOLLOW_WITH_GET,\n  \"302\": REDIRECT_TYPE.FOLLOW_WITH_GET,\n  \"303\": REDIRECT_TYPE.FOLLOW_WITH_GET,\n  \"307\": REDIRECT_TYPE.FOLLOW_WITH_CONFIRMATION,\n  \"308\": REDIRECT_TYPE.FOLLOW_WITH_CONFIRMATION\n};\n\n/**\n * Maximum redirects error.\n */\nexport class MaxRedirectsError extends Error {\n  code = \"EMAXREDIRECTS\";\n\n  constructor(public request: CommonRequest, message: string) {\n    super(message);\n  }\n}\n\n/**\n * Redirect confirmation function.\n */\nexport type ConfirmRedirect = <\n  T extends CommonRequest,\n  U extends CommonResponse\n>(\n  request: T,\n  response: U\n) => boolean;\n\n/**\n * Middleware function for following HTTP redirects.\n */\nexport function redirects<T extends CommonRequest, U extends CommonResponse>(\n  fn: (req: T, next: () => Promise<U>) => Promise<U>,\n  maxRedirects = 5,\n  confirmRedirect: ConfirmRedirect = () => false\n): (req: T, next: () => Promise<U>) => Promise<U> {\n  return async function(initReq, done) {\n    let req = initReq.clone();\n    let redirectCount = 0;\n\n    while (redirectCount++ < maxRedirects) {\n      const res = await fn(req as T, done);\n      const redirect = REDIRECT_STATUS[res.status];\n\n      if (redirect === undefined || !res.headers.has(\"Location\")) return res;\n\n      const newUrl = resolve(req.url, res.headers.get(\"Location\")!); // tslint:disable-line\n\n      await res.destroy(); // Ignore the result of the response on redirect.\n\n      req.signal.emit(\"redirect\", newUrl);\n\n      if (redirect === REDIRECT_TYPE.FOLLOW_WITH_GET) {\n        const method = initReq.method.toUpperCase() === \"HEAD\" ? \"HEAD\" : \"GET\";\n\n        req = initReq.clone();\n        req.url = newUrl;\n        req.method = method;\n        req.$rawBody = null; // Override internal raw body.\n\n        // No body will be sent with this redirect.\n        req.headers.set(\"Content-Length\", \"0\");\n\n        continue;\n      }\n\n      if (redirect === REDIRECT_TYPE.FOLLOW_WITH_CONFIRMATION) {\n        const { method } = req;\n\n        // Following HTTP spec by automatically redirecting with GET/HEAD.\n        if (method.toUpperCase() === \"GET\" || method.toUpperCase() === \"HEAD\") {\n          req = initReq.clone();\n          req.url = newUrl;\n          req.method = method;\n\n          continue;\n        }\n\n        // Allow the user to confirm redirect according to HTTP spec.\n        if (confirmRedirect(req, res)) {\n          req = initReq.clone();\n          req.url = newUrl;\n          req.method = method;\n\n          continue;\n        }\n      }\n\n      return res;\n    }\n\n    throw new MaxRedirectsError(\n      req,\n      `Maximum redirects exceeded: ${maxRedirects}`\n    );\n  };\n}\n"]}