{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;AAAA,+CAAiD;AAMxC,oBANA,wBAAS,CAMA;AAElB;;GAEG;AACH,SAAgB,OAAO,CACrB,GAAG,GAAG,IAAI,wBAAS,EAAE;IAErB,OAAO,KAAK,UAAU,SAAS,CAAC,GAAG,EAAE,IAAI;QACvC,MAAM,WAAW,GAAG,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE5D,MAAM,GAAG,GAAG,MAAM,IAAI,OAAO,CAAI,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACnD,GAAG,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAiB,EAAE,OAAe,EAAE,EAAE;gBAClE,IAAI,GAAG;oBAAE,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;gBAE5B,IAAI,OAAO,EAAE;oBACX,GAAG,CAAC,OAAO,CAAC,GAAG,CACb,QAAQ,EACR,WAAW,CAAC,CAAC,CAAC,GAAG,WAAW,KAAK,OAAO,EAAE,CAAC,CAAC,CAAC,OAAO,CACrD,CAAC;iBACH;gBAED,OAAO,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;YACzB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QAEjD,MAAM,OAAO,CAAC,GAAG,CACf,OAAO,CAAC,GAAG,CAAC,UAAS,MAAM;YACzB,OAAO,IAAI,OAAO,CAAO,UAAS,OAAO,EAAE,MAAM;gBAC/C,GAAG,CAAC,SAAS,CACX,MAAM,EACN,GAAG,CAAC,GAAG,EACP,EAAE,WAAW,EAAE,IAAI,EAAE,EACrB,CAAC,GAAiB,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CACvD,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CACH,CAAC;QAEF,OAAO,GAAG,CAAC;IACb,CAAC,CAAC;AACJ,CAAC;AAtCD,0BAsCC","sourcesContent":["import { CookieJar, Cookie } from \"tough-cookie\";\nimport { CommonRequest, CommonResponse } from \"servie/dist/common\";\n\n/**\n * Export cookie jar support.\n */\nexport { CookieJar };\n\n/**\n * Read and write cookies with a cookie jar.\n */\nexport function cookies<T extends CommonRequest, U extends CommonResponse>(\n  jar = new CookieJar()\n): (req: T, next: () => Promise<U>) => Promise<U> {\n  return async function cookieJar(req, next) {\n    const prevCookies = req.headers.getAll(\"Cookie\").join(\"; \");\n\n    const res = await new Promise<U>((resolve, reject) => {\n      jar.getCookieString(req.url, (err: Error | null, cookies: string) => {\n        if (err) return reject(err);\n\n        if (cookies) {\n          req.headers.set(\n            \"Cookie\",\n            prevCookies ? `${prevCookies}; ${cookies}` : cookies\n          );\n        }\n\n        return resolve(next());\n      });\n    });\n\n    const cookies = res.headers.getAll(\"set-cookie\");\n\n    await Promise.all(\n      cookies.map(function(cookie) {\n        return new Promise<void>(function(resolve, reject) {\n          jar.setCookie(\n            cookie,\n            req.url,\n            { ignoreError: true },\n            (err: Error | null) => (err ? reject(err) : resolve())\n          );\n        });\n      })\n    );\n\n    return res;\n  };\n}\n"]}