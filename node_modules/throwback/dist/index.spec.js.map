{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../src/index.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { compose, Next } from \"./index\";\n\ndescribe(\"throwback\", () => {\n  // Run tests on each code path.\n  runTests(\"production\");\n  runTests(\"development\");\n\n  describe(\"debug mode\", () => {\n    it(\"should select debug mode based on node env by default\", () => {\n      const fn = compose([]);\n\n      expect(fn.name).toEqual(\"composedDebug\");\n    });\n  });\n\n  describe(\"debug errors\", () => {\n    it(\"throw when input is not an array\", () => {\n      expect(() => (compose as any)(\"test\", true)).toThrow(\n        \"Expected middleware to be an array, got string\"\n      );\n    });\n\n    it(\"throw when values are not functions\", () => {\n      expect(() => (compose as any)([1, 2, 3], true)).toThrow(\n        \"Expected middleware to contain functions, but got number\"\n      );\n    });\n\n    it(\"throw when done is not a function\", () => {\n      const fn = compose([]);\n\n      expect(() => (fn as any)(true)).toThrow(\n        \"Expected the last argument to be `done(ctx)`, but got undefined\"\n      );\n    });\n\n    it(\"throw when calling `next()` multiple times\", async () => {\n      const fn = compose([\n        function(value: any, next: Next<any>) {\n          return next().then(() => next());\n        }\n      ]);\n\n      await expect(fn({}, () => Promise.resolve())).rejects.toEqual(\n        new Error(\"`next()` called multiple times\")\n      );\n    });\n\n    it(\"should throw if final function attempts to call `next()`\", async () => {\n      const fn = compose([]);\n\n      await expect(\n        fn({}, ((ctx: any, next: any) => next()) as any)\n      ).rejects.toEqual(\n        new TypeError(\"Composed `done(ctx)` function should not call `next()`\")\n      );\n    });\n\n    it(\"should throw if function returns `undefined`\", async () => {\n      const fn = compose([\n        function(ctx) {\n          /* Ignore. */\n        }\n      ]);\n\n      await expect(fn(true, () => Promise.resolve())).rejects.toEqual(\n        new TypeError(\"Expected middleware to return `next()` or a value\")\n      );\n    });\n  });\n});\n\n/**\n * Execute tests in each \"mode\".\n */\nfunction runTests(nodeEnv: string) {\n  jest.resetModules()\n\n  process.env.NODE_ENV = nodeEnv;\n\n  const { compose } = require('./index');\n\n  describe(`compose middleware with env ${nodeEnv}`, () => {\n    it(\"should select debug mode based on node env by default\", () => {\n      const fn = compose([]);\n      const expectedName =\n        nodeEnv === \"production\" ? \"composed\" : \"composedDebug\";\n\n      expect(fn.name).toEqual(expectedName);\n    });\n\n    it(\"should compose middleware functions\", async () => {\n      const arr: number[] = [];\n\n      const fn = compose([\n        function(ctx: any, next: Next<string>) {\n          arr.push(1);\n\n          return next().then(value => {\n            arr.push(5);\n\n            expect(value).toEqual(\"propagate\");\n\n            return \"done\";\n          });\n        },\n        function(ctx: any, next: Next<string>) {\n          arr.push(2);\n\n          return next().then(value => {\n            arr.push(4);\n\n            expect(value).toEqual(\"hello\");\n\n            return \"propagate\";\n          });\n        }\n      ]);\n\n      await fn({}, () => {\n        arr.push(3);\n\n        return \"hello\";\n      });\n\n      expect(arr).toEqual([1, 2, 3, 4, 5]);\n    });\n\n    it(\"branch middleware by composing\", async () => {\n      const arr: number[] = [];\n\n      const fn = compose([\n        compose([\n          function(ctx: any, next: Next<void>) {\n            arr.push(1);\n\n            return next().catch(() => {\n              arr.push(3);\n            });\n          },\n          function(ctx: any, next: Next<void>) {\n            arr.push(2);\n\n            return Promise.reject<void>(new Error(\"Boom!\"));\n          }\n        ]),\n        function(ctx: any, next: Next<void>) {\n          arr.push(4);\n\n          return next();\n        }\n      ]);\n\n      await fn({}, (): void => undefined);\n\n      expect(arr).toEqual([1, 2, 3]);\n    });\n  });\n}\n"]}